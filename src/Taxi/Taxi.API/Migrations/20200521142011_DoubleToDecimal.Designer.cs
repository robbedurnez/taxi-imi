// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi.API.Data;

namespace Taxi.API.Migrations
{
    [DbContext(typeof(TaxiContext))]
    [Migration("20200521142011_DoubleToDecimal")]
    partial class DoubleToDecimal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "73243b97-52b1-41c6-8521-f455fe9072fa",
                            ConcurrencyStamp = "8ccb0d97-95ec-4440-b0cb-51ba469e9d43",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "733a8b9d-197d-486a-a82f-3e034c6f4d11",
                            ConcurrencyStamp = "e28a105f-0a64-405a-9a75-200172125807",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "353d5cf4-8ed9-4622-97d4-dbf0959ec233",
                            ConcurrencyStamp = "2426a2f1-8326-4ac7-8854-9f1818196b90",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "78943822-274e-434a-817a-38d7801b07df",
                            ConcurrencyStamp = "2963e5a7-1732-408f-a544-c45f171f04cc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            RoleId = "78943822-274e-434a-817a-38d7801b07df"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "78943822-274e-434a-817a-38d7801b07df"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "733a8b9d-197d-486a-a82f-3e034c6f4d11"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "733a8b9d-197d-486a-a82f-3e034c6f4d11"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "353d5cf4-8ed9-4622-97d4-dbf0959ec233"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            AddressLine1 = "Provinciebaan 28",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.073039000000001,
                            Longitude = 2.975749,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            AddressLine1 = "Kleine stationsstraat 12",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091222999999999,
                            Longitude = 2.9746260000000002,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "5e9f6f77-fb49-4ff4-8003-d948a8f1bed7",
                            AddressLine1 = "Ringlaan 33",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091836999999998,
                            Longitude = 2.977001,
                            PostalCode = "8680",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d37950b-73d4-476a-9efb-08e59808943f",
                            Email = "durnez.robbe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ROBBE@HOTMAIL.COM",
                            NormalizedUserName = "DURNEZ.ROBBE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH4/r+pQYlKRHE7zAbA8BhdgENLD4VXs6owu2PqJ78Amzvj1PthnNnLiChO/AvY4DQ==",
                            PhoneNumber = "+32497635255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cab5ef1-3e0f-4964-a6c9-ad8dde6ba0f5",
                            TwoFactorEnabled = false,
                            UserName = "durnez.robbe@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3494bbc-2b4c-4304-bd8b-a21e76c61b16",
                            Email = "durnez.anthony@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ANTHONY@GMAIL.COM",
                            NormalizedUserName = "DURNEZ.ANTHONY@gmail.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7x7tRK/er4LvgBk5OF2HLghomTqjNb7z0BWYRXbZPZ/V1tovkEB1PklvvORWjkyg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b8091c3-ae3b-4fc5-9896-09f04ed83fab",
                            TwoFactorEnabled = false,
                            UserName = "durnez.anthony@GMAIL.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34fa5943-fec2-4164-9a5f-f42b7df021ec",
                            Email = "driver1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER1@TAXI.COM",
                            NormalizedUserName = "DRIVER1@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJrY16mBJvRzLEJ4JaPwbdcQv+56oZg7HqK5eAWPSu6NvONitaN2+bDxkfZA64oT2w==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f67992db-87e9-49fa-a44e-39263c9993ed",
                            TwoFactorEnabled = false,
                            UserName = "driver1@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13149875-4166-4747-8937-bcb206b49c2c",
                            Email = "driver2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER2@TAXI.COM",
                            NormalizedUserName = "DRIVER2@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrCAfd3Mu/L2SaXjBABO0sY6uqxc4UO45dxP15qxDjghspYoFcl6rKqUMrDQLEJsQ==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d647ce6-bcbe-4a9f-b981-c59c729e374d",
                            TwoFactorEnabled = false,
                            UserName = "driver2@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77212a09-164b-48e9-bad9-492aa954d83c",
                            Email = "company1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY1@TAXI.COM",
                            NormalizedUserName = "COMPANY1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMk1kADJVa7RH+gfgRwIM2c1+msGRpkGVUQivnXG+ERTb+MwoMJIgcqrd9vpoMrIvg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeddb684-214f-4d64-8f64-b7739f9a50fc",
                            TwoFactorEnabled = false,
                            UserName = "Company1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf4495ca-3ed9-4b28-ac41-cb9f9dea7f3a",
                            Email = "company2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY2@TAXI.COM",
                            NormalizedUserName = "COMPANY2",
                            PasswordHash = "AQAAAAEAACcQAAAAECdHTyb4LrGcJWcFFm2EDshc6AI/W6U3/XaLTNKUYKEoWS/pLlhbk4+JHQVBzXCi4Q==",
                            PhoneNumber = "+32497643255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6847d23a-bd97-4bba-8d9f-a61693a70e04",
                            TwoFactorEnabled = false,
                            UserName = "Company2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5aa926f-d4a5-4658-bee5-4a3dd9d8ed3d",
                            Email = "customer7@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER7@TAXI.COM",
                            NormalizedUserName = "CUSTOMER7@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcxZ9S2OadLB/xtqZYMjfSg66d75T+43N8IXwzg4W4wrdgxymH/4gd4jPM5Tv4JqA==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c3fb60f-e3e6-46c6-a494-d3688f0594cb",
                            TwoFactorEnabled = false,
                            UserName = "customer7@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d162dbc0-ee5e-48b1-92b2-2cd7c647fa23",
                            Email = "customer8@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER8@TAXI.COM",
                            NormalizedUserName = "CUSTOMER8@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJjAX/Q3gV0NkSuYADz7BKLor1vjKtll3ERDdjlsDqoh/+tm4kZD2stsGVGmy7pmIQ==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd46745e-347b-40f0-8344-7d44389cc270",
                            TwoFactorEnabled = false,
                            UserName = "customer8@taxi.com"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(4390),
                            Name = "Maxi Tarco",
                            PricePerKm = 2m,
                            StartPrice = 5m,
                            UserType = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(4640),
                            Name = "Company 2",
                            PricePerKm = 1.5m,
                            StartPrice = 10m,
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(6470),
                            FirstName = "Robbe",
                            LastName = "Durnez",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(6610),
                            FirstName = "Anthony",
                            LastName = "Durnez",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(6800),
                            FirstName = "User7",
                            LastName = "Taxi",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(6920),
                            FirstName = "User8",
                            LastName = "Taxi",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(9720),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = true,
                            LastName = "Driver1",
                            Latitude = 51.086199999999998,
                            Longitude = 2.9763999999999999,
                            UserType = 1
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 849, DateTimeKind.Local).AddTicks(9900),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = false,
                            LastName = "Driver200",
                            Latitude = 51.091799999999999,
                            Longitude = 2.9746000000000001,
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000100",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 850, DateTimeKind.Local).AddTicks(2500),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000200",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 850, DateTimeKind.Local).AddTicks(2680),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000300",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 850, DateTimeKind.Local).AddTicks(2790),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000400",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 850, DateTimeKind.Local).AddTicks(2900),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000500",
                            Created = new DateTime(2020, 5, 21, 16, 20, 11, 850, DateTimeKind.Local).AddTicks(3000),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 2,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Taxi.Domain.Models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Taxi.Domain.Models.Driver", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
