// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi.API.Data;

namespace Taxi.API.Migrations
{
    [DbContext(typeof(TaxiContext))]
    [Migration("20200425234939_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "edd6b435-5986-42e3-8517-a44af9f6b59a",
                            ConcurrencyStamp = "4c943ab4-5d49-47c0-9a16-a9894a7af094",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "08517b2f-66c3-468d-a5fc-c0d9bbba6208",
                            ConcurrencyStamp = "34822778-f2f0-4589-a32a-606835d2f15e",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "ae39515f-29fc-49c4-95f5-e18f2ec7acdb",
                            ConcurrencyStamp = "8fb07fbf-04b0-4353-84e7-44ba76960194",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "565e1f6e-9348-46ef-9cc0-ed93f8bba435",
                            ConcurrencyStamp = "6e88ef91-126e-4deb-9819-cb97acde8b98",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            RoleId = "565e1f6e-9348-46ef-9cc0-ed93f8bba435"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "565e1f6e-9348-46ef-9cc0-ed93f8bba435"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "08517b2f-66c3-468d-a5fc-c0d9bbba6208"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "08517b2f-66c3-468d-a5fc-c0d9bbba6208"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "ae39515f-29fc-49c4-95f5-e18f2ec7acdb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            AddressLine1 = "Provinciebaan 28",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.073039000000001,
                            Longitude = 2.975749,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            AddressLine1 = "Kleine stationsstraat 12",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091222999999999,
                            Longitude = 2.9746260000000002,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "4d6b5430-2454-45ca-9617-dff7c847abc2",
                            AddressLine1 = "Ringlaan 33",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091836999999998,
                            Longitude = 2.977001,
                            PostalCode = "8680",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f754c67-c4b6-4f23-9300-0fd2529d6dbf",
                            Email = "durnez.robbe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ROBBE@HOTMAIL.COM",
                            NormalizedUserName = "DURNEZ.ROBBE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA0LsZINHAwtjnL6tiiDE6Y9zMfmkFzaAFg4Keeb0umbqyaGSKMPTTOhxQLPkma8KA==",
                            PhoneNumber = "+32497635255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28d4a26d-f7f5-40e7-bf55-a5cf9b2a7da9",
                            TwoFactorEnabled = false,
                            UserName = "durnez.robbe@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4072dfba-677e-4e93-824f-9fd78badc9af",
                            Email = "durnez.anthony@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ANTHONY@GMAIL.COM",
                            NormalizedUserName = "DURNEZ.ANTHONY@gmail.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENEGXtjoEOQSE6Fg7b9W7eXDrplnYfvYi7t4pYUqQlU0F8kOne5iwNRb4EXNbfgA4g==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4f74d93-7603-453d-9357-fe56d7cc37e5",
                            TwoFactorEnabled = false,
                            UserName = "durnez.anthony@GMAIL.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d5937a7-d6d2-4a95-94a5-6b4c7c5bc96f",
                            Email = "driver1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER1@TAXI.COM",
                            NormalizedUserName = "DRIVER1@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOG4eedqntXysDxFatK3iitiOEjiAcs4/qTWG7am/UOT/2+meyAIiWzzepfNN5V6Bw==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "983fb6bc-79f2-472e-878a-7d04752aadef",
                            TwoFactorEnabled = false,
                            UserName = "driver1@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3303bee4-8812-4b05-b616-c576e12502e2",
                            Email = "driver2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER2@TAXI.COM",
                            NormalizedUserName = "DRIVER2@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwTcg7h1c4zZt0azkwnQBXk0t4MokxB+W50hwHB6EoWcqjPWWusGgw8jsn6bHa7Dg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afe78433-a36b-484d-8e6c-ed875de0354c",
                            TwoFactorEnabled = false,
                            UserName = "driver2@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7e75c14-286b-4115-ba14-23ea2df43010",
                            Email = "company1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY1@TAXI.COM",
                            NormalizedUserName = "COMPANY1",
                            PasswordHash = "AQAAAAEAACcQAAAAELKxrhUIdlzLbAy3FuJeC5/OjBFALTBXHW9KaduGs2QzgEvZ5lp8LPtlN2MdFURqKw==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3685714f-f24c-4a57-987c-98614d272324",
                            TwoFactorEnabled = false,
                            UserName = "Company1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fcfde87-c155-4ab9-9863-ca903fd2f88c",
                            Email = "company2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY2@TAXI.COM",
                            NormalizedUserName = "COMPANY2",
                            PasswordHash = "AQAAAAEAACcQAAAAEJGb24UAMV6DCdVYaBQPpgvwC2gEKte2pjXwJZ9CbT5wKzwyQ6PUQuGVZG9jVSoNog==",
                            PhoneNumber = "+32497643255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5916563-0a5f-4348-9579-dec0c4ca19c6",
                            TwoFactorEnabled = false,
                            UserName = "Company2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0777832c-230e-46a4-85a9-4e9325fa797f",
                            Email = "customer7@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER7@TAXI.COM",
                            NormalizedUserName = "CUSTOMER7@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHmysxuC/mR9V+tL/72kctynuJKT5W4ZcJHWeUI79PxTkM51IhshrnDOsY1Y/iatqg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4f4b0d3-8058-417e-a237-1b4c3e628f7c",
                            TwoFactorEnabled = false,
                            UserName = "customer7@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fa5c7f7-1188-4376-a1fb-ae8cda2a1beb",
                            Email = "customer8@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER8@TAXI.COM",
                            NormalizedUserName = "CUSTOMER8@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBHvkvceoVf8G5juemQ0YoXrod/9GUAibscT3z8Dji1cqBOh5ebhM62wXEltJ78ctw==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1dcc856-7afb-4a19-aa4c-b42f915f753b",
                            TwoFactorEnabled = false,
                            UserName = "customer8@taxi.com"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("float");

                    b.Property<double>("StartPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(4020),
                            Name = "Maxi Tarco",
                            PricePerKm = 2.0,
                            StartPrice = 5.0,
                            UserType = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(4220),
                            Name = "Company 2",
                            PricePerKm = 1.5,
                            StartPrice = 10.0,
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(6070),
                            FirstName = "Robbe",
                            LastName = "Durnez",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(6210),
                            FirstName = "Anthony",
                            LastName = "Durnez",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(6430),
                            FirstName = "User7",
                            LastName = "Taxi",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(6540),
                            FirstName = "User8",
                            LastName = "Taxi",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(9670),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = true,
                            LastName = "Driver1",
                            Latitude = 51.086199999999998,
                            Longitude = 2.9763999999999999,
                            UserType = 1
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 934, DateTimeKind.Local).AddTicks(9830),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = false,
                            LastName = "Driver200",
                            Latitude = 51.091799999999999,
                            Longitude = 2.9746000000000001,
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000100",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 935, DateTimeKind.Local).AddTicks(2300),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0.0,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000200",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 935, DateTimeKind.Local).AddTicks(2470),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0.0,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000300",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 935, DateTimeKind.Local).AddTicks(2580),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0.0,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000400",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 935, DateTimeKind.Local).AddTicks(2670),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0.0,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000500",
                            Created = new DateTime(2020, 4, 26, 1, 49, 39, 935, DateTimeKind.Local).AddTicks(2770),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 2,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0.0,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Taxi.Domain.Models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Taxi.Domain.Models.Driver", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
