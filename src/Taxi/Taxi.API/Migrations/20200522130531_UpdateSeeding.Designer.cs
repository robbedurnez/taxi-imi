// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi.API.Data;

namespace Taxi.API.Migrations
{
    [DbContext(typeof(TaxiContext))]
    [Migration("20200522130531_UpdateSeeding")]
    partial class UpdateSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "e361c9f9-4d70-45c4-9daa-39c7d59167f8",
                            ConcurrencyStamp = "6f362499-3ff6-4489-9d99-855c75249913",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "09826ca7-1cba-4711-824a-d3e88a383d76",
                            ConcurrencyStamp = "12d03b25-3742-43e6-9a78-31507db01bb2",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "3006edde-70f6-41f9-974e-8f5eb2d25712",
                            ConcurrencyStamp = "e50d098f-60d3-41cf-b0f9-e35a3290b199",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "fa739f0f-3279-4f33-ad7d-7de5519dfb85",
                            ConcurrencyStamp = "d195bcee-e197-4a0a-bc72-a4c2f37ea199",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            RoleId = "fa739f0f-3279-4f33-ad7d-7de5519dfb85"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "fa739f0f-3279-4f33-ad7d-7de5519dfb85"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "09826ca7-1cba-4711-824a-d3e88a383d76"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "09826ca7-1cba-4711-824a-d3e88a383d76"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "3006edde-70f6-41f9-974e-8f5eb2d25712"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            AddressLine1 = "Provinciebaan 28",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.073039000000001,
                            Longitude = 2.975749,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            AddressLine1 = "Kleine stationsstraat 12",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091222999999999,
                            Longitude = 2.9746260000000002,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "69dfce39-1e62-4a7d-9198-6fa330a0a7dd",
                            AddressLine1 = "Ringlaan 33",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091836999999998,
                            Longitude = 2.977001,
                            PostalCode = "8680",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14a06aae-a028-435c-a4b8-1bfc8cb5b5e1",
                            Email = "durnez.robbe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ROBBE@HOTMAIL.COM",
                            NormalizedUserName = "DURNEZ.ROBBE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECdfjMX9Lw8MIQ0aJNAfeYjQLJMeYUb4e850mjSIs+R+Wc/IYQuXQ8iXOJQiv8U6Aw==",
                            PhoneNumber = "+32497635255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffaa1f42-e2a0-42e6-85af-1defaad9162d",
                            TwoFactorEnabled = false,
                            UserName = "durnez.robbe@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a8eda67-5e55-41c8-ad93-d0cf7563d151",
                            Email = "durnez.anthony@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ANTHONY@GMAIL.COM",
                            NormalizedUserName = "DURNEZ.ANTHONY@gmail.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKB1tHE/+kiaYAPQd7Zmo7vSMQzqJxjOo9bvo1Lu0qvK/9jlhfP23xeE/bEb4+l3LA==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79368d97-e47a-4bc0-862d-102c973909e1",
                            TwoFactorEnabled = false,
                            UserName = "durnez.anthony@GMAIL.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30791eb9-37bf-477a-be47-7299c0c1402b",
                            Email = "driver1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER1@TAXI.COM",
                            NormalizedUserName = "DRIVER1@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFZAbtOYgqsvz7al38auOmKTOZBDrZSCEFVUdt3w/VexPlUzQEHQCPrufrZswLJ6GA==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a43f5389-109b-4de7-b111-8c67d78db9d5",
                            TwoFactorEnabled = false,
                            UserName = "driver1@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e57abaf9-6391-490a-9369-18463c538827",
                            Email = "driver2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER2@TAXI.COM",
                            NormalizedUserName = "DRIVER2@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO17nIyYQKheEJY37xcKuOtnmpGzzme1wWNxoTNXd+MNxwBn3f2aaMw/W3FECWhXZg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "631c9f33-4387-42fb-b9a1-b069bf1a6321",
                            TwoFactorEnabled = false,
                            UserName = "driver2@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfeec0c2-4357-4a94-af0c-235b2fd4330e",
                            Email = "company1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY1@TAXI.COM",
                            NormalizedUserName = "COMPANY1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGADrrHWJ2GQGcPMH5Tj16XarlkTDqeYjSf1V7mnQjMbpspKTCKhvx3hw03jXGqiWQ==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9502cd7c-a6ab-4b34-9474-1c82f63a864e",
                            TwoFactorEnabled = false,
                            UserName = "Company1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "734e437c-e952-4c14-949e-40e43278bd29",
                            Email = "company2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY2@TAXI.COM",
                            NormalizedUserName = "COMPANY2",
                            PasswordHash = "AQAAAAEAACcQAAAAEI41wba5QCHk4FfRElwHCLOlP7S85oMFAdBtPO6u97NCKmb0Rwq8mV6m46Zgskwgxw==",
                            PhoneNumber = "+32497643255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf3662eb-e1c9-41d7-8bc6-b3bf068a0859",
                            TwoFactorEnabled = false,
                            UserName = "Company2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6e02bf1-bd6e-4e13-a012-270fab838225",
                            Email = "customer7@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER7@TAXI.COM",
                            NormalizedUserName = "CUSTOMER7@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENsbph0ewS8XYhtjQglUGLZa/EUFJfLHFq1ZJotJ3m/lzd1kai5/L8k51sf6NSFdhg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18828d92-4e55-429a-90e0-0b28c5c01bf3",
                            TwoFactorEnabled = false,
                            UserName = "customer7@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3fc0dbf-2b82-4deb-acf1-b2e7a74532e8",
                            Email = "customer8@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER8@TAXI.COM",
                            NormalizedUserName = "CUSTOMER8@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAE8lWOEDYLU+kouUUPtoo5GpkRs7cpO26orE8D9Foh1Wudvi9QQtJ1Dv191R29hxg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec8c5a8f-cc81-4966-b517-96daf06cae66",
                            TwoFactorEnabled = false,
                            UserName = "customer8@taxi.com"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 418, DateTimeKind.Local).AddTicks(4200),
                            Name = "Maxi Tarco",
                            PricePerKm = 2m,
                            StartPrice = 5m,
                            UserType = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 418, DateTimeKind.Local).AddTicks(4390),
                            Name = "Company 2",
                            PricePerKm = 1.5m,
                            StartPrice = 10m,
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 418, DateTimeKind.Local).AddTicks(8200),
                            Email = "durnez.robbe@hotmail.com",
                            FirstName = "Robbe",
                            LastName = "Durnez",
                            PhoneNumber = "+32497635255",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 418, DateTimeKind.Local).AddTicks(8350),
                            Email = "durnez.anthony@gmail.com",
                            FirstName = "Anthony",
                            LastName = "Durnez",
                            PhoneNumber = "+32497645255",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 418, DateTimeKind.Local).AddTicks(8480),
                            Email = "customer7@taxi.com",
                            FirstName = "User7",
                            LastName = "Taxi",
                            PhoneNumber = "+32497645255",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 418, DateTimeKind.Local).AddTicks(8680),
                            Email = "customer8@taxi.com",
                            FirstName = "User8",
                            LastName = "Taxi",
                            PhoneNumber = "+32497645255",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(1760),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = true,
                            LastName = "Driver1",
                            Latitude = 51.086199999999998,
                            Longitude = 2.9763999999999999,
                            UserType = 1
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(1950),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = false,
                            LastName = "Driver200",
                            Latitude = 51.091799999999999,
                            Longitude = 2.9746000000000001,
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000100",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(4410),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000200",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(4570),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000300",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(4670),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000400",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(4770),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000500",
                            Created = new DateTime(2020, 5, 22, 15, 5, 31, 419, DateTimeKind.Local).AddTicks(4870),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 2,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Taxi.Domain.Models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Taxi.Domain.Models.Driver", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
