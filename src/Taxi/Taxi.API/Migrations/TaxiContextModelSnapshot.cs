// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi.API.Data;

namespace Taxi.API.Migrations
{
    [DbContext(typeof(TaxiContext))]
    partial class TaxiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "afb8583c-e097-49ae-bbb9-8e7343d42abf",
                            ConcurrencyStamp = "e31d4d6e-9eb9-46cf-a0e6-9db51fb41633",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "76fe4c8b-0617-49c1-b0cf-75084ff238c0",
                            ConcurrencyStamp = "06fa4098-1df4-4600-8b76-852aa871a81a",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "c68a9ff4-1cbb-4b46-abe8-b86fc5bb47c2",
                            ConcurrencyStamp = "a05e2696-5ef2-423a-8ac3-2aadac354b6c",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "f242fb06-9b03-421e-8e4f-da9aa3e30db7",
                            ConcurrencyStamp = "6a01fda7-de81-4ae8-a169-1f67e9548004",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            RoleId = "f242fb06-9b03-421e-8e4f-da9aa3e30db7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "f242fb06-9b03-421e-8e4f-da9aa3e30db7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "76fe4c8b-0617-49c1-b0cf-75084ff238c0"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "76fe4c8b-0617-49c1-b0cf-75084ff238c0"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "c68a9ff4-1cbb-4b46-abe8-b86fc5bb47c2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            AddressLine1 = "Provinciebaan 28",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.073039000000001,
                            Longitude = 2.975749,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            AddressLine1 = "Kleine stationsstraat 12",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091222999999999,
                            Longitude = 2.9746260000000002,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "80c54817-dd00-4558-a1b8-771716b2ae4b",
                            AddressLine1 = "Ringlaan 33",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091836999999998,
                            Longitude = 2.977001,
                            PostalCode = "8680",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53889ba1-0407-4f27-8807-5257a995263a",
                            Email = "durnez.robbe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ROBBE@HOTMAIL.COM",
                            NormalizedUserName = "DURNEZ.ROBBE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL3XvZu4GouGHTXM0cv1hFjsJQKdfmI0Pjz4xMuGb5PX1RI1/0oG2rdlZ0UdlSGGJg==",
                            PhoneNumber = "+32497635255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3295901d-c024-4a13-a7a7-897e2b4f5d97",
                            TwoFactorEnabled = false,
                            UserName = "durnez.robbe@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1bbdbb4d-b703-4038-b2b7-901dc7264a24",
                            Email = "durnez.anthony@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ANTHONY@GMAIL.COM",
                            NormalizedUserName = "DURNEZ.ANTHONY@gmail.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIs7HX4zpwL0lhUKEkEGPpQnzZm4BmhLbTDgdXpnQIBILfWjiYeFRUG43Ze+HK+8eQ==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1ed9849-e79d-4d3e-8d95-dcd23aaad959",
                            TwoFactorEnabled = false,
                            UserName = "durnez.anthony@GMAIL.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "449a0d26-0821-4735-9dfc-6bb4dfc23f87",
                            Email = "driver1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER1@TAXI.COM",
                            NormalizedUserName = "DRIVER1@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPwIWoEaAh8J4J1Kl1wgK+LsP5Dh84IiiA+PRv/cY7pYQy2WBbUKdXIDSMv3099Jtg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9d371d2-c19d-4aff-a1e7-58a550c8ae75",
                            TwoFactorEnabled = false,
                            UserName = "driver1@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fda93ba3-5c2e-478a-8159-f1521891f8a1",
                            Email = "driver2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER2@TAXI.COM",
                            NormalizedUserName = "DRIVER2@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxleN1E78ZCC/neB+NYKU162RCoWQqcV/+gD2qkmt0E8WxgXj5NRPt4HtgKnkiOtw==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89eead78-777c-471a-b315-3cce3d9f226d",
                            TwoFactorEnabled = false,
                            UserName = "driver2@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cbcfa06-770c-4dff-879b-58d34819e4b7",
                            Email = "company1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY1@TAXI.COM",
                            NormalizedUserName = "COMPANY1",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOe9HDFi+ysEteyWd7N1OOWg8fO3gcy6uqV5hrIeLIV2oYcIRMC3bfcWFxEr7U6KA==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da449b93-625f-49e6-93e6-050f30664421",
                            TwoFactorEnabled = false,
                            UserName = "Company1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13ffd37a-eb42-4976-9a1d-53ba409783d5",
                            Email = "company2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY2@TAXI.COM",
                            NormalizedUserName = "COMPANY2",
                            PasswordHash = "AQAAAAEAACcQAAAAENZs2TUKC5+fdfhArryfALh4/Sqf29gWofAhLOUWjxdMCv9Zb9+f1f+Ty0jOmt6UEg==",
                            PhoneNumber = "+32497643255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "763c23df-852d-46ef-adb2-0c64b9eea6a7",
                            TwoFactorEnabled = false,
                            UserName = "Company2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5310a94-2d21-4876-882e-f85946819a72",
                            Email = "customer7@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER7@TAXI.COM",
                            NormalizedUserName = "CUSTOMER7@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRtvUPKC0P777embYBXAZKF9pTCm/ICicENaFa1ersk7ZlKJoOIMCTBzTtGoe2d3w==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d453c21-06c8-447e-87e8-02042aef8c7d",
                            TwoFactorEnabled = false,
                            UserName = "customer7@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2c4fdef-122f-458f-b20f-d8334b7549cb",
                            Email = "customer8@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER8@TAXI.COM",
                            NormalizedUserName = "CUSTOMER8@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEERbgzuQCWFo1pru602SnDRVFNF+e8nKV8pVsAjXZnfnxSOcJY3iORdEM7JsSQPuvQ==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a185de8-681d-4bf5-afd1-96eace303b25",
                            TwoFactorEnabled = false,
                            UserName = "customer8@taxi.com"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 642, DateTimeKind.Local).AddTicks(6020),
                            Name = "Maxi Tarco",
                            PricePerKm = 2m,
                            StartPrice = 5m,
                            UserType = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 642, DateTimeKind.Local).AddTicks(6170),
                            Name = "Company 2",
                            PricePerKm = 1.5m,
                            StartPrice = 10m,
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 642, DateTimeKind.Local).AddTicks(8180),
                            FirstName = "Robbe",
                            LastName = "Durnez",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 642, DateTimeKind.Local).AddTicks(8310),
                            FirstName = "Anthony",
                            LastName = "Durnez",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 642, DateTimeKind.Local).AddTicks(8420),
                            FirstName = "User7",
                            LastName = "Taxi",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 642, DateTimeKind.Local).AddTicks(8530),
                            FirstName = "User8",
                            LastName = "Taxi",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(1080),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = true,
                            LastName = "Driver1",
                            Latitude = 51.086199999999998,
                            Longitude = 2.9763999999999999,
                            UserType = 1
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(1250),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = false,
                            LastName = "Driver200",
                            Latitude = 51.091799999999999,
                            Longitude = 2.9746000000000001,
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000100",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(3790),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 25m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000200",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(3910),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 20.38m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000300",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(4020),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 21.45m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000400",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(4120),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 19.04m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000500",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 6, 1, 13, 16, 31, 643, DateTimeKind.Local).AddTicks(4260),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 2,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 22m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Taxi.Domain.Models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Taxi.Domain.Models.Driver", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
