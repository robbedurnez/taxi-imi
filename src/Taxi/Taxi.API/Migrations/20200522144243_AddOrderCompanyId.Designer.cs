// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi.API.Data;

namespace Taxi.API.Migrations
{
    [DbContext(typeof(TaxiContext))]
    [Migration("20200522144243_AddOrderCompanyId")]
    partial class AddOrderCompanyId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ec287194-9661-4997-912c-6ee2ca038197",
                            ConcurrencyStamp = "2b9ba29d-d02d-45d1-af6a-64de092c8fce",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c636a7fa-3bd0-4f1e-a0fe-13a3a2d0c39c",
                            ConcurrencyStamp = "8d1a8faa-b961-47f5-a25d-2cfba646c993",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "260a8a1e-93f3-44bb-8112-9050bdcfe7dc",
                            ConcurrencyStamp = "a3e3bc38-715f-482c-b3ab-7ffd7bca32c6",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "12cb5833-6060-465b-92dd-a500792404d9",
                            ConcurrencyStamp = "20493452-2ff0-440e-b333-a2c799869623",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            RoleId = "12cb5833-6060-465b-92dd-a500792404d9"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "12cb5833-6060-465b-92dd-a500792404d9"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "c636a7fa-3bd0-4f1e-a0fe-13a3a2d0c39c"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "c636a7fa-3bd0-4f1e-a0fe-13a3a2d0c39c"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "260a8a1e-93f3-44bb-8112-9050bdcfe7dc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            AddressLine1 = "Provinciebaan 28",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.073039000000001,
                            Longitude = 2.975749,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            AddressLine1 = "Kleine stationsstraat 12",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091222999999999,
                            Longitude = 2.9746260000000002,
                            PostalCode = "8680",
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "6c076bed-0dac-4774-a483-c8c1a4010558",
                            AddressLine1 = "Ringlaan 33",
                            AddressLine2 = "",
                            City = "Koekelare",
                            Latitude = 51.091836999999998,
                            Longitude = 2.977001,
                            PostalCode = "8680",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7e56ac0-baec-4e2e-8e3c-c6c43a745ae3",
                            Email = "durnez.robbe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ROBBE@HOTMAIL.COM",
                            NormalizedUserName = "DURNEZ.ROBBE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFapkP8+DyTMdaudaqMZ1perHj9T/375RUJWIJyHG37Z7f4Wgm8Bbal55NOQjv/2rQ==",
                            PhoneNumber = "+32497635255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5940e791-5577-4d4c-a5f7-dd40625c25bd",
                            TwoFactorEnabled = false,
                            UserName = "durnez.robbe@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e08a65b8-310d-4461-a023-8b9200bfe4b0",
                            Email = "durnez.anthony@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DURNEZ.ANTHONY@GMAIL.COM",
                            NormalizedUserName = "DURNEZ.ANTHONY@gmail.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENUFPFGz4imrn7dehc5wo3gKWJ2QNlUmVBYL5CVSEI/xReJ5ucPlMPpoO2pAkA7Jrw==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a5a9ef7-b35f-4fef-8891-d817fe7de8f7",
                            TwoFactorEnabled = false,
                            UserName = "durnez.anthony@GMAIL.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "725a545c-38cf-4a8d-a7c5-53431912bdf8",
                            Email = "driver1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER1@TAXI.COM",
                            NormalizedUserName = "DRIVER1@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC3qcaGMAOs11x3G+O5SLucQVxHv+zPw0X0iSUR30FIpXIkv8d9GYVPIXYs0AfJn8g==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66a06915-882c-4c13-a0e3-50d3b9e98ff8",
                            TwoFactorEnabled = false,
                            UserName = "driver1@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "856d71bd-2934-47de-8a0a-5f3e8ff1af81",
                            Email = "driver2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER2@TAXI.COM",
                            NormalizedUserName = "DRIVER2@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxBkqt1qNrHzvzzurV8qHc4JOgYhTTPZseZhGVhePUHYLk8iTFnnqAUREn8c8/vcg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5d769a0-2a1d-4cd9-9d9b-201a7cf975b7",
                            TwoFactorEnabled = false,
                            UserName = "driver2@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d033701-e9d5-4802-b759-545721ef81be",
                            Email = "company1@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY1@TAXI.COM",
                            NormalizedUserName = "COMPANY1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAns0/E2k9F08YhZS29W3/KicnQJtLDTjTmxm4Q8NdPapkuX79xYw8whKGe1FD/7Dg==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa71ca69-148c-4def-aa91-46ac4cc1028c",
                            TwoFactorEnabled = false,
                            UserName = "Company1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e618b08e-2e78-4f8a-8236-623633f5b07c",
                            Email = "company2@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPANY2@TAXI.COM",
                            NormalizedUserName = "COMPANY2",
                            PasswordHash = "AQAAAAEAACcQAAAAEOY35O8QDP2cWgqzaC5Z7ukEthAczy9QoTXFBRDtcEwJBFV09XR9/IEk01ccvuQi+Q==",
                            PhoneNumber = "+32497643255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f1b8616-7684-42d9-b007-8c25a0ddefe4",
                            TwoFactorEnabled = false,
                            UserName = "Company2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9c810d9-74b4-450a-86b7-c985bc6f905e",
                            Email = "customer7@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER7@TAXI.COM",
                            NormalizedUserName = "CUSTOMER7@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENw77v9h1aIw0OScZv80RCYw8Rg3xKlxojh4coHdOoJt5RiL3rZI23M9B7p47ncc2Q==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95e3d366-2fb9-451f-9f15-febc0cd569f9",
                            TwoFactorEnabled = false,
                            UserName = "customer7@taxi.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce131d90-aea6-4402-b250-312838f80bdc",
                            Email = "customer8@taxi.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER8@TAXI.COM",
                            NormalizedUserName = "CUSTOMER8@TAXI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJOBrU9oCH2fSF3Bx14to2KJRLiSxOmMpVukpvIhaGhg6pME8vpJliwjnoUogou7Q==",
                            PhoneNumber = "+32497645255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "833b8809-8f8f-4f99-b363-af2daa745766",
                            TwoFactorEnabled = false,
                            UserName = "customer8@taxi.com"
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 645, DateTimeKind.Local).AddTicks(9330),
                            Name = "Maxi Tarco",
                            PricePerKm = 2m,
                            StartPrice = 5m,
                            UserType = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 645, DateTimeKind.Local).AddTicks(9500),
                            Name = "Company 2",
                            PricePerKm = 1.5m,
                            StartPrice = 10m,
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "31588e97-5c6b-48dd-89a1-edd92deb3bcb",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(3130),
                            Email = "durnez.robbe@hotmail.com",
                            FirstName = "Robbe",
                            LastName = "Durnez",
                            PhoneNumber = "+32497635255",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(3270),
                            Email = "durnez.anthony@gmail.com",
                            FirstName = "Anthony",
                            LastName = "Durnez",
                            PhoneNumber = "+32497645255",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(3540),
                            Email = "customer7@taxi.com",
                            FirstName = "User7",
                            LastName = "Taxi",
                            PhoneNumber = "+32497645255",
                            UserType = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(3670),
                            Email = "customer8@taxi.com",
                            FirstName = "User8",
                            LastName = "Taxi",
                            PhoneNumber = "+32497645255",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(6590),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = true,
                            LastName = "Driver1",
                            Latitude = 51.086199999999998,
                            Longitude = 2.9763999999999999,
                            UserType = 1
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(7050),
                            FirstName = "Taxi",
                            IsActive = true,
                            IsAvailable = false,
                            LastName = "Driver200",
                            Latitude = 51.091799999999999,
                            Longitude = 2.9746000000000001,
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000100",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(9840),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000200",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 646, DateTimeKind.Local).AddTicks(9960),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000300",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 647, DateTimeKind.Local).AddTicks(60),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 1,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000400",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 647, DateTimeKind.Local).AddTicks(160),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 0,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000500",
                            CompanyId = "00000000-0000-0000-0000-000000000004",
                            Created = new DateTime(2020, 5, 22, 16, 42, 43, 647, DateTimeKind.Local).AddTicks(260),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "00000000-0000-0000-0000-000000000002",
                            FromId = "31588e97-5c6b-48dd-89a1-edd92deb3bbb",
                            State = 2,
                            ToId = "31588e97-5c6b-48dd-89a1-edd92deb3ccc",
                            TotalPrice = 0m,
                            UserId = "31588e97-5c6b-48dd-89a1-edd92deb3bcb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taxi.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi.Domain.Models.Address", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Taxi.Domain.Models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Taxi.Domain.Models.Driver", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Driver", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Taxi.Domain.Models.Order", b =>
                {
                    b.HasOne("Taxi.Domain.Models.Company", null)
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
